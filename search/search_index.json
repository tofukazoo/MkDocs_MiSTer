{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"What is MiSTer FPGA? MiSTer is an open source project that aims to recreate various classic computers, game consoles and arcade machines, using modern hardware. It allows software and game images to run as they would on original hardware, using peripherals such as mice, keyboards, joysticks and other game controllers. MiSTer utilizes a readily available FPGA board called the ' DE10-Nano ', which connects to your TV or monitor via HDMI video out. It can also be expanded with various add-ons (such as a 7-port USB hub, SDRAM, and either a Digital I/O or Analog I/O board). The MiSTer project is currently under active development, with new cores, features, and bug-fixes appearing on a regular basis.","title":"Home"},{"location":"#what-is-mister-fpga","text":"MiSTer is an open source project that aims to recreate various classic computers, game consoles and arcade machines, using modern hardware. It allows software and game images to run as they would on original hardware, using peripherals such as mice, keyboards, joysticks and other game controllers. MiSTer utilizes a readily available FPGA board called the ' DE10-Nano ', which connects to your TV or monitor via HDMI video out. It can also be expanded with various add-ons (such as a 7-port USB hub, SDRAM, and either a Digital I/O or Analog I/O board). The MiSTer project is currently under active development, with new cores, features, and bug-fixes appearing on a regular basis.","title":"What is MiSTer FPGA?"},{"location":"advanced/audio/","text":"Tour of audio options: User filters Core options eg Genesis and C64. Brief explanation of aliasing and 44.1kHz --> 48kHz or 96kHz sound filtering example video mt32-pi example","title":"Audio Filters"},{"location":"advanced/audio/#sound-filtering-example-video","text":"","title":"sound filtering example video"},{"location":"advanced/audio/#mt32-pi-example","text":"","title":"mt32-pi example"},{"location":"advanced/cheats/","text":"Define more advanced instructions for cheats here as opposed to the very simple explanation in basics/games.md","title":"Cheat Engine"},{"location":"advanced/computer/","text":"Define more advanced computer features in general, like the difference between symbolic mapping and positional mapping of keyboards maybe? Some serial connection features?","title":"Computer Core Networking"},{"location":"advanced/crt/","text":"calm down, it's not that crt... relax...","title":"Using Your CRT With MiSTer"},{"location":"advanced/global/","text":"","title":"Global INI Settings"},{"location":"advanced/network/","text":"CIFS mounting, and not sure what else here off the top of my head.","title":"Setting Up SSH, FTP, and NAS"},{"location":"advanced/video/","text":"Go into custom video modes, custom aspect ratios, using core specific vsync_adjust in the ini, etc...","title":"Video Filters"},{"location":"basics/bluetooth/","text":"Bluetooth adapter recommendations, caveats for compatibility, demonstrate how to pair via the built-in pairing system with the keyboard instead of the script (which currently isn't working well apparently).","title":"Bluetooth"},{"location":"basics/hotkey/","text":"MiSTer hotkey reference. Probably a table that is fairly simple with the most commonly used on priority, categorized into use case maybe? Need to really look at Main_MiSTer because a lot of functionality has been added that isn't documented in one place.","title":"Hotkeys"},{"location":"basics/input/","text":"MiSTer has support for a wide variety of input devices. It also has options to configure these devices to fit your needs. Here is a breakdown of some special configurations for various input devices like spinners, gamepads, joysticks, and keyboards. What is supported? Generally speaking, any normal USB HID compatible input device is compatible. Keyboards, arcade spinners, usb adapters for original controllers such as the Raphnet and Daemonbite retro adapters, and even modern console controllers like the DualSense PS5 controller. There is even the Serial Native Accessory Connector, if you have one of the Analog or Digital IO add-on boards, which on supported cores allows you to use original hardware controllers, such as lightguns, which would normally only work with the original system and require zero lag to function. Serial Native Accessory Convertor (SNAC) SNAC adaptors allow you to connect original hardware controllers and peripherals to the MiSTer cores. The cores which support SNAC connections have been specially built to have serial connections exposed to specific pins on the DE10-Nano. That means when you pull the trigger on the NES Zapper while aiming at your CRT, the signals travel almost instantly, similar to how they would on original hardware. Using A Mouse You can also use a mouse for various purposes on the MiSTer. The main purpose for mouse support is for some computer cores which had mice. One of the cool things you can do is use it as an emulated lightgun with a pointer. And the same way of doing this applies to a wiimote with a powered sensor bar. You can do this by pairing your wiimote to the MiSTer and it will be used as a Mouse when paired. You can also use a mouse for a paddle","title":"Controllers"},{"location":"basics/input/#what-is-supported","text":"Generally speaking, any normal USB HID compatible input device is compatible. Keyboards, arcade spinners, usb adapters for original controllers such as the Raphnet and Daemonbite retro adapters, and even modern console controllers like the DualSense PS5 controller. There is even the Serial Native Accessory Connector, if you have one of the Analog or Digital IO add-on boards, which on supported cores allows you to use original hardware controllers, such as lightguns, which would normally only work with the original system and require zero lag to function.","title":"What is supported?"},{"location":"basics/input/#serial-native-accessory-convertor-snac","text":"SNAC adaptors allow you to connect original hardware controllers and peripherals to the MiSTer cores. The cores which support SNAC connections have been specially built to have serial connections exposed to specific pins on the DE10-Nano. That means when you pull the trigger on the NES Zapper while aiming at your CRT, the signals travel almost instantly, similar to how they would on original hardware.","title":"Serial Native Accessory Convertor (SNAC)"},{"location":"basics/input/#using-a-mouse","text":"You can also use a mouse for various purposes on the MiSTer. The main purpose for mouse support is for some computer cores which had mice. One of the cool things you can do is use it as an emulated lightgun with a pointer. And the same way of doing this applies to a wiimote with a powered sensor bar. You can do this by pairing your wiimote to the MiSTer and it will be used as a Mouse when paired. You can also use a mouse for a paddle","title":"Using A Mouse"},{"location":"basics/video/","text":"Brief description of subjects Scaler setup: latency and resolution Scanlines and shadowmasks Gamma 5x mode (\"requires 1080p\", etc...) 5x mode video ] gamma controls video","title":"Video Configuration"},{"location":"basics/video/#5x-mode-video","text":"]","title":"5x mode video"},{"location":"basics/video/#gamma-controls-video","text":"","title":"gamma controls video"},{"location":"basics/wifi/","text":"Wifi is totally optional and it's setup is fairly simple with the MiSTer. You will need a compatible dongle, the wifi script (which is provided with the Mr. Fusion image), and a keyboard attached to your MiSTer to type in your WiFi password. Suggested WiFi Adapters You will require a compatible USB WiFi Adapter to use this feature as there is no integrated WiFi on the DE10-Nano or the MiSTer Add-on boards. Not all models of wifi adapters are compatible, so try to stick with decent name brands. Many users have found that most small ASUS, TP-Link, CanaKit, and Edimax wifi USB adapters work out of the box. Here's a few that have been reported to work: ASUS USB AC53 nano rev A1 TP-Link AC1300 Archer T3U or Nano AC600 Archer T2U CanaKit Raspberry Pi WiFi dongle Edimax EW-7612UAn v2 or EW-7811UN or EW-7822ULC Netgear A6100 or A6150 Your results may vary as there may be new hardware revisions of these adapters which are not currently supported. There are ways to compile your own drivers for your device but that is for advanced users. INSERT LINK TO NEW DOC FOR THIS Setup wifi with a script It's easy to connect to WiFi using the wifi.sh script provided with the Mr. Fusion image: Navigate to the scripts menu using the on screen display (OSD). Select the \"wifi\" script and run it. Select your WiFi network's SSID (the name of your WiFi). Type your WiFi password in and press enter. It should connect and ask you to press any key to continue. At the top of the main menu you will see a little wifi icon which indicates you have connected. This setting should be saved and it will automatically connect so long as the adapter is plugged in and your MiSTer is within range of your WiFi network. The manual way to setup wifi In case the script isn't working for you, you can try to manually setup Wifi. This is a slightly more advanced user method so feel free to ask for help from the community before attempting this method. To manually setup WiFi without the script: Edit the file /media/fat/linux/_wpa_supplicant.conf with a text editor that supports Unix/Linux line endings. Replace put_your_SSID_here with your Wifi Network's SSID, and replace put_your_password_here with your WiFi password. Change the country code to the one that matches your country . Rename _wpa_supplicant.conf to wpa_supplicant.conf Reboot the MiSTer. After the MiSTer reboots you should see the wifi icon at the top of the Main Menu's OSD. This may take quite awhile so be patient, the MiSTer is not super fast at connecting to your WiFi network, it's a simple device with simple means. :)","title":"WiFi"},{"location":"basics/wifi/#suggested-wifi-adapters","text":"You will require a compatible USB WiFi Adapter to use this feature as there is no integrated WiFi on the DE10-Nano or the MiSTer Add-on boards. Not all models of wifi adapters are compatible, so try to stick with decent name brands. Many users have found that most small ASUS, TP-Link, CanaKit, and Edimax wifi USB adapters work out of the box. Here's a few that have been reported to work: ASUS USB AC53 nano rev A1 TP-Link AC1300 Archer T3U or Nano AC600 Archer T2U CanaKit Raspberry Pi WiFi dongle Edimax EW-7612UAn v2 or EW-7811UN or EW-7822ULC Netgear A6100 or A6150 Your results may vary as there may be new hardware revisions of these adapters which are not currently supported. There are ways to compile your own drivers for your device but that is for advanced users. INSERT LINK TO NEW DOC FOR THIS","title":"Suggested WiFi Adapters"},{"location":"basics/wifi/#setup-wifi-with-a-script","text":"It's easy to connect to WiFi using the wifi.sh script provided with the Mr. Fusion image: Navigate to the scripts menu using the on screen display (OSD). Select the \"wifi\" script and run it. Select your WiFi network's SSID (the name of your WiFi). Type your WiFi password in and press enter. It should connect and ask you to press any key to continue. At the top of the main menu you will see a little wifi icon which indicates you have connected. This setting should be saved and it will automatically connect so long as the adapter is plugged in and your MiSTer is within range of your WiFi network.","title":"Setup wifi with a script"},{"location":"basics/wifi/#the-manual-way-to-setup-wifi","text":"In case the script isn't working for you, you can try to manually setup Wifi. This is a slightly more advanced user method so feel free to ask for help from the community before attempting this method. To manually setup WiFi without the script: Edit the file /media/fat/linux/_wpa_supplicant.conf with a text editor that supports Unix/Linux line endings. Replace put_your_SSID_here with your Wifi Network's SSID, and replace put_your_password_here with your WiFi password. Change the country code to the one that matches your country . Rename _wpa_supplicant.conf to wpa_supplicant.conf Reboot the MiSTer. After the MiSTer reboots you should see the wifi icon at the top of the Main Menu's OSD. This may take quite awhile so be patient, the MiSTer is not super fast at connecting to your WiFi network, it's a simple device with simple means. :)","title":"The manual way to setup wifi"},{"location":"cores/arcade/","text":"Core Name Arkanoid AsteroidsDeluxe Asteroids Astrocade ATetris Bagman Berzerk BlackWidow BombJack Breakout BurgerTime BurningRubber CanyonBomber Cave Centipede ComputerSpace Cosmic CrazyBalloon CrazyClimber CrazyKong Defender DigDug Dominos DonkeyKong3 DonkeyKongJunior DonkeyKong DottoriKun Druaga Finalizer FoodFight Frenzy Galaga Galaxian Gaplus Gauntlet Gyruss IremM62 IronHorse Jackal Jailbreak Ladybug LunarLander MarioBros MCR1 MCR2 MCR3Mono MCR3Scroll MCR3 MoonPatrol MrDo NinjaKun Pacman Pengo Phoenix Pleiads PolyPlay Pong Pooyan Popeye QBert Rallyx RiverPatrol Robotron RushnAttack ScooterShooter Scramble SEGASYS1 SilverLand SkySkipper SolomonsKey SpaceInvaders SpaceRace Sprint1 Sprint2 Subs SuperBreakout Tecmo TIAMC1 TimePilot84 TimePilot TraverseUSA Ultratank VBall Xevious Zaxxon ZigZag","title":"Arcade Cores"},{"location":"cores/computer/","text":"","title":"Computer Cores"},{"location":"cores/console/","text":"Core Name Systems /games/ Folder BIOS SDRAM AY-3-8500 \"Pong-on-a-chip\" ./AY-3-8500 Arcadia Emerson Arcadia 2001 ./Arcadia Astrocade Bally Astrocade ./Astrocade boot.rom = Astrocade BIOS Atari2600 Atari 2600 Atari VCS ./Atari2600 Atari5200 Atari 5200 SuperSystem ./Atari5200 Atari7800 Atari 7800 ProSystem Atari 2600 Support ./Atari7800 boot0.rom = BIOS (optional) \u2714\ufe0f AtariLynx Atari Lynx ./AtariLynx boot.rom = bootrom (lynxboot.img) ChannelF Fairchild Channel F ./ChannelF ColecoVision ColecoVision Sega SG-1000 ./Coleco ./SG1000 \u2714\ufe0f GBA Nintendo Game Boy Advance ./GBA boot.rom = BIOS (recommended) Optional GBA2P 2x Game Boy Advance (2-Player) ./GBA2P boot.rom = BIOS (recommended) \u2714\ufe0f GameBoy Nintendo Game Boy ./Gameboy boot1.rom = Gameboy Color BIOS boot2.rom = autoload a game \u2714\ufe0f Gameboy2P 2x Game Boy (2-Player) ./Gameboy2P boot1.rom = Gameboy Color BIOS boot2.rom = autoload a game \u2714\ufe0f Genesis Sega Genesis Sega Mega Drive ./Genesis Optional Intv Mattel Intellivision ./Intv boot0.rom = exec.bin boot1.rom = grom.bin boot2.rom = sp0256-012.bin boot3.rom = ecs.bin MegaCD Sega CD Sega Mega-CD ./MegaCD boot.rom = BIOS cd_bios.rom = separate folder BIOS \u2714\ufe0f NES Nintendo Entertainment System Famicom Disk System NSF Music Player ./NES boot0.rom = FDS BIOS boot1.rom = NES Cart (optional) boot2.rom = blank FDS image (optional) boot3.rom = .PAL Palette File (optional) \u2714\ufe0f NeoGeo SNK Neo Geo AES & MVS ./NeoGeo 000-lo.lo sfix.sfix sp-s2.sp1 (MVS) neo-epo.sp1 (AES) uni-bios.rom \u2714\ufe0f Odyssey2 Magnavox Odyssey 2 Philips Odyssey 2 Philips Videopac G7000 ./Odyssey2 SMS Sega Master System Sega Game Gear Sega SG-1000 ./SMS ./SG1000 \u2714\ufe0f SNES Super Nintendo Entertainment System Nintendo Satellaview SPC Music Player ./SNES bsx_bios.rom = Satellaview ROM \u2714\ufe0f TurboGrafx16 NEC TurboGrafx-16 / PC Engine CD-ROM\u00b2 / Super CD-ROM\u00b2 Duo / TurboDuo SuperGrafx Arcade Card ./TGFX16 ./TGFX16-CD cd_bios.rom = BIOS Place in tgfx16-cd Optional VC4000 Interton VC4000 Acetronic MPU-1000 Occitane OC2000 ./VC4000 Vectrex Vectrex ./Vectrex WonderSwan Bandai WonderSwan WonderSwan Color SwanCrystal ./WonderSwan boot.rom = WonderSwan bootrom boot1.rom = WonderSwan Color bootrom \u2714\ufe0f","title":"Console Cores"},{"location":"cores/what/","text":"In MiSTer terminology, a \"core\" is the current way the FPGA's logic is configured. It's configured as the \"Menu\" core when you power on the MiSTer for the first time. Then if you use the OSD and go to _Console and then select NES , it will configure the FPGA to be the \"NES\" core. The term \"core\" has been used by Hardware Description Language (HDL) developers in a way which refers to the things that are programmed onto the FPGA. So for instance, the MiSTer FPGA framework uses Intel's \"Altera PLL Core\". This is a chunk of logic that is portable which allows developers to hook up to the clock on the chip. There are HDMI cores, ethernet cores, serial data cores, and so on... What happens when I load a core? Imagine every time you load a core you are connecting a different console, computer, or arcade system to your television. You select the Genesis core in the menu and load it, you have now essentially plugged a Genesis into your television without all the hassle of wrestling with cables. That's the concept. What actually is happening is that .rbf file is reprogramming the FPGA chip to take on a different form. It used to contain the digital logic required to be an NES combined with the MiSTer FPGA core components, and it turned into a chip with the digital logic for the Genesis combined with the the MiSTer FPGA core components. Now, you may be worried that all of this rewriting of the FPGA could reduce it's lifespan. This isn't something to worry about, these kinds of FPGA's (SRAM-based) are considered to have an indefinite number of writes. Many millions of rewrites to the same sector should be possible.","title":"What Is a Core"},{"location":"cores/what/#what-happens-when-i-load-a-core","text":"Imagine every time you load a core you are connecting a different console, computer, or arcade system to your television. You select the Genesis core in the menu and load it, you have now essentially plugged a Genesis into your television without all the hassle of wrestling with cables. That's the concept. What actually is happening is that .rbf file is reprogramming the FPGA chip to take on a different form. It used to contain the digital logic required to be an NES combined with the MiSTer FPGA core components, and it turned into a chip with the digital logic for the Genesis combined with the the MiSTer FPGA core components. Now, you may be worried that all of this rewriting of the FPGA could reduce it's lifespan. This isn't something to worry about, these kinds of FPGA's (SRAM-based) are considered to have an indefinite number of writes. Many millions of rewrites to the same sector should be possible.","title":"What happens when I load a core?"},{"location":"cores/highlights/ace/","text":"","title":"Jupiter Ace"},{"location":"cores/highlights/atari7800/","text":"","title":"Atari 7800"},{"location":"cores/highlights/gb2p/","text":"Game Boy 2-Player Demonstration","title":"Game Boy 2 Player"},{"location":"cores/highlights/gb2p/#game-boy-2-player-demonstration","text":"","title":"Game Boy 2-Player Demonstration"},{"location":"cores/highlights/genesis/","text":"The Genesis core is a port of the fpgagen core to MiSTer, with significant enhancements and additions. Features Composite Blending effect (e.g. Sonic Waterfall transparency) CPU Turbo option (e.g. Road Rash gameplay speed) Increase sprite limit. Audio Filtering options for Model 1, Model 2, Minimal, and No Filter Switch between YM2612 (Model 1) or YM3438 (Model 2/3) FM Synth Multitap: 4-way, Team Player, J-Cart SVP Chip (Virtua Racing for Genesis supported) Auto-Region header detection using the new style and the old style combined . Corrected Aspect Ratio option for 320x224 game resolutions (e.g. Castlevania Moon). Region detection There are two methods of region detection. Header: This method detects a character in the header to determine if the game was intended to be played on a Japanese, European, or American version of the console. This method is default and preferred as it is compatible with the entire commercial lineup. This option uses a region priority setting for multi-region games which had \"JUE\" in the header. Whatever the first region is, will be the region set on load of a multi-region game. File Ext: This method changes the region according to the filename extension of the rom. BIN = Japanese, GEN = America, MD = Europe. There is also a re Corrected Aspect Ratio Composite video Turbo CPU Brief overview, similar to the readme on github, use as reference but don't just copy paste list of features readme section has to explain header detection first, really important, tons of users have issues with this add some caveats for known ongoing bugs in some games (micro machines, eeproms, etc...) to alleviate concerns and unnecessary ticket generation, also helps with searches internally and externally.","title":"Genesis"},{"location":"cores/highlights/genesis/#features","text":"Composite Blending effect (e.g. Sonic Waterfall transparency) CPU Turbo option (e.g. Road Rash gameplay speed) Increase sprite limit. Audio Filtering options for Model 1, Model 2, Minimal, and No Filter Switch between YM2612 (Model 1) or YM3438 (Model 2/3) FM Synth Multitap: 4-way, Team Player, J-Cart SVP Chip (Virtua Racing for Genesis supported) Auto-Region header detection using the new style and the old style combined . Corrected Aspect Ratio option for 320x224 game resolutions (e.g. Castlevania Moon).","title":"Features"},{"location":"cores/highlights/genesis/#region-detection","text":"There are two methods of region detection. Header: This method detects a character in the header to determine if the game was intended to be played on a Japanese, European, or American version of the console. This method is default and preferred as it is compatible with the entire commercial lineup. This option uses a region priority setting for multi-region games which had \"JUE\" in the header. Whatever the first region is, will be the region set on load of a multi-region game. File Ext: This method changes the region according to the filename extension of the rom. BIN = Japanese, GEN = America, MD = Europe. There is also a re","title":"Region detection"},{"location":"cores/highlights/genesis/#corrected-aspect-ratio","text":"","title":"Corrected Aspect Ratio"},{"location":"cores/highlights/genesis/#composite-video","text":"","title":"Composite video"},{"location":"cores/highlights/genesis/#turbo-cpu","text":"Brief overview, similar to the readme on github, use as reference but don't just copy paste list of features readme section has to explain header detection first, really important, tons of users have issues with this add some caveats for known ongoing bugs in some games (micro machines, eeproms, etc...) to alleviate concerns and unnecessary ticket generation, also helps with searches internally and externally.","title":"Turbo CPU"},{"location":"cores/highlights/laser/","text":"","title":"Laser 310"},{"location":"cores/highlights/nes/","text":"general overview of the nes features of the core advantages over typical NES og hardware and emulators should really be emphasized, this is an EXCELLENT core bios boot video for later Download Blank FDS boot2.rom - place this in /media/fat/games/NES/ palettes example","title":"NES"},{"location":"cores/highlights/nes/#bios-boot-video-for-later","text":"Download Blank FDS boot2.rom - place this in /media/fat/games/NES/","title":"bios boot video for later"},{"location":"cores/highlights/nes/#palettes-example","text":"","title":"palettes example"},{"location":"cores/highlights/snes/","text":"show off system, use github readme as reference, focus on features super fx turbo showcase","title":"SNES"},{"location":"cores/highlights/snes/#super-fx-turbo-showcase","text":"","title":"super fx turbo showcase"},{"location":"cores/highlights/tgfx16/","text":"show off system, use github readme as reference, focus on features","title":"TurboGrafx-16"},{"location":"developer/conf_str/","text":"MiSTer provides an on-screen display (OSD) that can be toggled on and off by pressing F12 on your keyboard (or OSD button). For each core that is loaded, this menu can be configured to add specific options for that core. The top-level module for the cores is emu . This does NOT mean emu is the top-level module for the project, but rather it is the top-level module for our purposes. The emu module is typically found in the SystemVerilog file ( *.sv extension) with the same name as the project. As an example, the Arcade-Galaga project has it's top-level module at Arcade-Galaga.sv . The configuration string is stored in the variable CONF_STR of the emu module. This variable is passed to the hps_io module that handles sending it to the processor to be read when necessary. Each line of the configuration string is delimited with a semicolon. Most cores have a Status Bit Map placed at the top of the CONF_STR section. When developing a core, please use this as it's a helpful reference which aids in collaboration. This reference is edited by fellow developers to communicate which status bits are occupied. Only one option can occupy status[8] so this is important. Status Bit Map For example with nothing occupied: // Status Bit Map: // Upper Lower // 0 1 2 3 4 5 6 // 01234567890123456789012345678901 23456789012345678901234567890123 // 0123456789ABCDEFGHIJKLMNOPQRSTUV 0123456789ABCDEFGHIJKLMNOPQRSTUV // If you add a status bit option like O89 to the core configuration string, this is going to use the first group of status bits on the left since the \"O\" for option is capitalized (marked Upper). Then it's going to use 8 and 9, this is from the bottom row (which is alphanumeric). So you would update the index after using these like so: // Status Bit Map: // Upper Lower // 0 1 2 3 4 5 6 // 01234567890123456789012345678901 23456789012345678901234567890123 // 0123456789ABCDEFGHIJKLMNOPQRSTUV 0123456789ABCDEFGHIJKLMNOPQRSTUV // XX This will communicate to other developers that status[9:8] are occupied and should not be used. Valid options for the menu [] - means optional parameter C[,{Text}] - Enables a cheat menu entry with the label {Text} . CHEAT - like DIP, for arcades with a cheat system D{Index} - Prefix which disables the option if menumask[Index] is set. d{Index} - Same as 'D', but disables the option if menumask[Index] is NOT set. DIP - in arcade cores, this will display the DIP menu from the MRA F[S][#],{Ext}[,{Text}][,{Address}] - Load file button. {Ext} - a concatenated list of 3 character file extensions. For example, BINGEN would be BIN and GEN extensions. Optional {Text} string is the text that is displayed before the extensions like \"Load RAM\". If {Text} is not specified, then default is \"Load *\". Optional [S] - core supports save files, load a file, and mount a save for reading or writing # is explicit index (or index is generated from line number if index not given). Optional {Address} - load file directly into DDRAM at this address ioctl_index from hps_io will be: ioctl_index[5:0] = index(explicit or auto), ioctl_index[7:6] = extension index FC[#],{Ext}[,{Text}][,{Address}] - Open file and remember it, useful for remembering an alternative rom, config, or other type of file. See F for how the options work. H{Index} - Prefix which hides the option if menumask[Index] is set. h{Index} - Same as H , but hides the option if menumask[Index] is NOT set. O{Index1}[{Index2}],{Name},{Options...} - Option button that allows you to select between various choices. {Index1} and {Index2} are values from 0-9 and A-V (like Hex but it extends from A-V instead of A-F). This represents all 31 bits. First and second index are the range of bits that will be set in the status register. {Name} is what is shown to describe the option. {Options...} - a list of comma separated options. P{#},{Title} - Creates sub-page for options with {Title} . P{#} - Prefix to place the option into specific {#} page. This is added before O# but after something like d# . (e.g. \"d5P1o2,Vertical Crop,Disabled,216p(5x);\", is correct and \"P1d5o2,Vertical Crop,Disabled,216p(5x);\", is incorrect and the menu options will not work.) R{Index},{Name} - Same as T option but closes the OSD after selecting. Convenient for Reset option. S{Slot},{Ext}[,{Text}] - Mount SD card button. {Slot} - a value from 0-3. Up to four images can be mounted at the same time. {Ext} - same as in F option. (Optional) {Text} - The text that is displayed before the extensions like \"Load RAM\". If {Text} is not specified, then default is \"Mount *\". T{Index},{Name} - Trigger button. This is a simple button that will pulse HIGH of specified {Index} bit in status register. A perfect example of this is for a reset button. {Name} is the text that describes the button function. -[,TEXT] - empty (or with TEXT ) line. Lower case options o , t , r equal their upper case variants with adding 32 to status bit indexes. Non-OSD options These must be placed at the bottom of the configuration string: J[1],{Button1}[,{Button2},...] - J1 means lock keyboard to joystick emulation mode. Useful for keyboard-less systems such as consoles. {Button1},{Button2},... is list of joystick buttons used in the core. Up to 12 buttons can be listed. Analog axis are not defined here. The user just needs to map them through the Menu core. jn,{SNES Button Name1},[,{SNES Button2},...] - this sets the default mapping of the buttons. ie: jn,A would map joystick bit 4 to the A button on a SNES style controller automatically jp - same as jn but used when gamepad_defaults=1 in MiSTer.INI . Typically refers to positional mapping relative to a SNES controller V,{Version String} - Version string. {Version String} is the version string. Takes the core name and appends version string for name to display. I,INFO1,INFO2,...,INFO255 - INFO1-INFO255 lines to display as OSD info (top left corner of screen). DEFMRA,{mra name} - default MRA (ie: Puckman.mra) to be used when core is uploaded by USB blaster (debug) jn vs. jp and mapping conventions jn mapping is the default. jp mapping is used when the INI file has gamepad_defaults=1 the only difference in the two mappings is the \"philosophy\" of how they are expected to work The difference is one of convention when mapping buttons: * jn is name-base mapping * jp is position-based mapping What does this mean? Consider how the internal gamepad is defined on MiSTer: Internally, controllers are mapped in the menu core to a SNES-style gamepad The button order on the internal MiSTer gamepad is ABXYLR + Start + Select That is: button 1=A, button 2=B, and so on. With \"jn\" mapping: * the convention is to map button A of the core to the internal \"SNES A\" button. * If the core has no button \"A\", this would be the first button. * Second button would be \"SNES B\", and so forth. * This is because the name or order of the button matches the original definition (ABYXLR etc) With \"jp\" mapping: * the convention is to consider the physical location of each button * For a Genesis 3-button controller that has A, B, C as buttons, mapping would be \"SNES Y, SNES B, SNES A\" * This is because YBA on a SNES gamepad are the lower 3 buttons of the controller","title":"Core Configuration String"},{"location":"developer/conf_str/#status-bit-map","text":"For example with nothing occupied: // Status Bit Map: // Upper Lower // 0 1 2 3 4 5 6 // 01234567890123456789012345678901 23456789012345678901234567890123 // 0123456789ABCDEFGHIJKLMNOPQRSTUV 0123456789ABCDEFGHIJKLMNOPQRSTUV // If you add a status bit option like O89 to the core configuration string, this is going to use the first group of status bits on the left since the \"O\" for option is capitalized (marked Upper). Then it's going to use 8 and 9, this is from the bottom row (which is alphanumeric). So you would update the index after using these like so: // Status Bit Map: // Upper Lower // 0 1 2 3 4 5 6 // 01234567890123456789012345678901 23456789012345678901234567890123 // 0123456789ABCDEFGHIJKLMNOPQRSTUV 0123456789ABCDEFGHIJKLMNOPQRSTUV // XX This will communicate to other developers that status[9:8] are occupied and should not be used.","title":"Status Bit Map"},{"location":"developer/conf_str/#valid-options-for-the-menu","text":"[] - means optional parameter C[,{Text}] - Enables a cheat menu entry with the label {Text} . CHEAT - like DIP, for arcades with a cheat system D{Index} - Prefix which disables the option if menumask[Index] is set. d{Index} - Same as 'D', but disables the option if menumask[Index] is NOT set. DIP - in arcade cores, this will display the DIP menu from the MRA F[S][#],{Ext}[,{Text}][,{Address}] - Load file button. {Ext} - a concatenated list of 3 character file extensions. For example, BINGEN would be BIN and GEN extensions. Optional {Text} string is the text that is displayed before the extensions like \"Load RAM\". If {Text} is not specified, then default is \"Load *\". Optional [S] - core supports save files, load a file, and mount a save for reading or writing # is explicit index (or index is generated from line number if index not given). Optional {Address} - load file directly into DDRAM at this address ioctl_index from hps_io will be: ioctl_index[5:0] = index(explicit or auto), ioctl_index[7:6] = extension index FC[#],{Ext}[,{Text}][,{Address}] - Open file and remember it, useful for remembering an alternative rom, config, or other type of file. See F for how the options work. H{Index} - Prefix which hides the option if menumask[Index] is set. h{Index} - Same as H , but hides the option if menumask[Index] is NOT set. O{Index1}[{Index2}],{Name},{Options...} - Option button that allows you to select between various choices. {Index1} and {Index2} are values from 0-9 and A-V (like Hex but it extends from A-V instead of A-F). This represents all 31 bits. First and second index are the range of bits that will be set in the status register. {Name} is what is shown to describe the option. {Options...} - a list of comma separated options. P{#},{Title} - Creates sub-page for options with {Title} . P{#} - Prefix to place the option into specific {#} page. This is added before O# but after something like d# . (e.g. \"d5P1o2,Vertical Crop,Disabled,216p(5x);\", is correct and \"P1d5o2,Vertical Crop,Disabled,216p(5x);\", is incorrect and the menu options will not work.) R{Index},{Name} - Same as T option but closes the OSD after selecting. Convenient for Reset option. S{Slot},{Ext}[,{Text}] - Mount SD card button. {Slot} - a value from 0-3. Up to four images can be mounted at the same time. {Ext} - same as in F option. (Optional) {Text} - The text that is displayed before the extensions like \"Load RAM\". If {Text} is not specified, then default is \"Mount *\". T{Index},{Name} - Trigger button. This is a simple button that will pulse HIGH of specified {Index} bit in status register. A perfect example of this is for a reset button. {Name} is the text that describes the button function. -[,TEXT] - empty (or with TEXT ) line. Lower case options o , t , r equal their upper case variants with adding 32 to status bit indexes.","title":"Valid options for the menu"},{"location":"developer/conf_str/#non-osd-options","text":"These must be placed at the bottom of the configuration string: J[1],{Button1}[,{Button2},...] - J1 means lock keyboard to joystick emulation mode. Useful for keyboard-less systems such as consoles. {Button1},{Button2},... is list of joystick buttons used in the core. Up to 12 buttons can be listed. Analog axis are not defined here. The user just needs to map them through the Menu core. jn,{SNES Button Name1},[,{SNES Button2},...] - this sets the default mapping of the buttons. ie: jn,A would map joystick bit 4 to the A button on a SNES style controller automatically jp - same as jn but used when gamepad_defaults=1 in MiSTer.INI . Typically refers to positional mapping relative to a SNES controller V,{Version String} - Version string. {Version String} is the version string. Takes the core name and appends version string for name to display. I,INFO1,INFO2,...,INFO255 - INFO1-INFO255 lines to display as OSD info (top left corner of screen). DEFMRA,{mra name} - default MRA (ie: Puckman.mra) to be used when core is uploaded by USB blaster (debug)","title":"Non-OSD options"},{"location":"developer/conf_str/#jn-vs-jp-and-mapping-conventions","text":"jn mapping is the default. jp mapping is used when the INI file has gamepad_defaults=1 the only difference in the two mappings is the \"philosophy\" of how they are expected to work The difference is one of convention when mapping buttons: * jn is name-base mapping * jp is position-based mapping What does this mean? Consider how the internal gamepad is defined on MiSTer: Internally, controllers are mapped in the menu core to a SNES-style gamepad The button order on the internal MiSTer gamepad is ABXYLR + Start + Select That is: button 1=A, button 2=B, and so on. With \"jn\" mapping: * the convention is to map button A of the core to the internal \"SNES A\" button. * If the core has no button \"A\", this would be the first button. * Second button would be \"SNES B\", and so forth. * This is because the name or order of the button matches the original definition (ABYXLR etc) With \"jp\" mapping: * the convention is to consider the physical location of each button * For a Genesis 3-button controller that has A, B, C as buttons, mapping would be \"SNES Y, SNES B, SNES A\" * This is because YBA on a SNES gamepad are the lower 3 buttons of the controller","title":"jn vs. jp and mapping conventions"},{"location":"developer/goodluck/","text":"","title":"Good Luck!"},{"location":"setup/controller/","text":"Now we should define some gamepad inputs on our MiSTer. This is pretty easy to do. You should use a keyboard and your gamepad/controller for this step. For each different kind of controller you have, you should do this step, and the MiSTer will store a configuration based on that device's unique ID. Defining your Gamepad's buttons Go to the second menu in the On Screen Display where you went to for to run the Downloader or WiFi scripts. There is another option here, \"Define joystick buttons\". Select this option to configure your buttons on your gamepad: It will guide you through the process of detecting your general controller type by asking you to press a few d-pad buttons and maybe the analog sticks. Then it will ask you to assign some buttons: Four face buttons and two shoulder buttons Start and Select OSD button or 2-button combo (to use instead of F12 on the keyboard) A few extra buttons for advanced functions Skip any buttons you don't want to assign (there may be a lot of them) with the spacebar. If you accidentally assign the wrong button, don't worry, just define it all over again from the start. If you press enter to \"Finish\" too early, you might miss the Analog Joystick configuration step which is important if you have analog joysticks. Here is a picture to give you an idea of what the buttons it is asking you to press may represent: The L on the bottom left is referring to an analog joystick. Your controller may or may not have this. If it does, the step to define the analogy joystick's input is at the end, so your joystick will not work unless you go through the entire list of inputs to define. Another important button is the OSD button. Many modern controllers have a \"Home\" button, it's probably best to assign this to the OSD/Menu. If you do not assign anything to home, the only way to access the menu will be to use the F12 key on a keyboard.","title":"Define Your Gamepad"},{"location":"setup/controller/#defining-your-gamepads-buttons","text":"Go to the second menu in the On Screen Display where you went to for to run the Downloader or WiFi scripts. There is another option here, \"Define joystick buttons\". Select this option to configure your buttons on your gamepad: It will guide you through the process of detecting your general controller type by asking you to press a few d-pad buttons and maybe the analog sticks. Then it will ask you to assign some buttons: Four face buttons and two shoulder buttons Start and Select OSD button or 2-button combo (to use instead of F12 on the keyboard) A few extra buttons for advanced functions Skip any buttons you don't want to assign (there may be a lot of them) with the spacebar. If you accidentally assign the wrong button, don't worry, just define it all over again from the start. If you press enter to \"Finish\" too early, you might miss the Analog Joystick configuration step which is important if you have analog joysticks. Here is a picture to give you an idea of what the buttons it is asking you to press may represent: The L on the bottom left is referring to an analog joystick. Your controller may or may not have this. If it does, the step to define the analogy joystick's input is at the end, so your joystick will not work unless you go through the entire list of inputs to define. Another important button is the OSD button. Many modern controllers have a \"Home\" button, it's probably best to assign this to the OSD/Menu. If you do not assign anything to home, the only way to access the menu will be to use the F12 key on a keyboard.","title":"Defining your Gamepad's buttons"},{"location":"setup/games/","text":"To play games on the MiSTer you will need to transfer them to your MicroSD. There are other ways to load games, like over a NAS or using USB drive, but for now we're going to stick to the most basic easy method. If you'd like more information on these other methods you can head to the Advanced Networking Page of this site, to find out more. Games folder description The /games/ folder is where ROMs are stored. /games/NES is where you would place NES ROMs, for instance. Each MiSTer core looks to a specific folder for these ROMs so it is best to put them in the right place. Transfer ROMs over the Network with Samba/SMB The MiSTer comes setup with a Samba server already. This means you can connect to it like any other shared folder on the network. It's pretty easy. If you are using Windows, all you need to do is type \\\\MiSTer\\sdcard\\ in the address bar at the top of the File Explorer and press enter. You can do the same in Linux or on MacOS depending on how you access network shares on those systems the same way. In this case I'm going to transfer some ROMs to the /games/NES/ folder so I can use them with the NES core. Transfer ROMs to the MicroSD directly You can also turn off the MiSTer, remove the MicroSD and plug it into your computer to transfer roms. It will have an exFAT formatted partition named \"MiSTer\" that most operating systems can work with. After this is done you can proceed to the next step since we are going to Play a Game . File Formats CD images for any cores that use CD's must either be in CUE/BIN or CHD. CD Images can't be placed in zip folders/archives. VHD (virtual hard drive) files are the same, they must not be zipped. All other ROMs can be placed in zip folders/archives and accessed. The core will tell you which file extensions are accepted. If you have an issue with a ROM loading, the readme for that core that is available on GitHub or in the /games/$CORE/ folder should tell you what kinds of files work with that core.","title":"Transferring Games"},{"location":"setup/games/#games-folder-description","text":"The /games/ folder is where ROMs are stored. /games/NES is where you would place NES ROMs, for instance. Each MiSTer core looks to a specific folder for these ROMs so it is best to put them in the right place.","title":"Games folder description"},{"location":"setup/games/#transfer-roms-over-the-network-with-sambasmb","text":"The MiSTer comes setup with a Samba server already. This means you can connect to it like any other shared folder on the network. It's pretty easy. If you are using Windows, all you need to do is type \\\\MiSTer\\sdcard\\ in the address bar at the top of the File Explorer and press enter. You can do the same in Linux or on MacOS depending on how you access network shares on those systems the same way. In this case I'm going to transfer some ROMs to the /games/NES/ folder so I can use them with the NES core.","title":"Transfer ROMs over the Network with Samba/SMB"},{"location":"setup/games/#transfer-roms-to-the-microsd-directly","text":"You can also turn off the MiSTer, remove the MicroSD and plug it into your computer to transfer roms. It will have an exFAT formatted partition named \"MiSTer\" that most operating systems can work with. After this is done you can proceed to the next step since we are going to Play a Game .","title":"Transfer ROMs to the MicroSD directly"},{"location":"setup/games/#file-formats","text":"CD images for any cores that use CD's must either be in CUE/BIN or CHD. CD Images can't be placed in zip folders/archives. VHD (virtual hard drive) files are the same, they must not be zipped. All other ROMs can be placed in zip folders/archives and accessed. The core will tell you which file extensions are accepted. If you have an issue with a ROM loading, the readme for that core that is available on GitHub or in the /games/$CORE/ folder should tell you what kinds of files work with that core.","title":"File Formats"},{"location":"setup/play/","text":"Next all we need to do is load the core for the system we want to play. In our case it is the NES core. Just select Console then NES and hit enter or the button you assigned \"A\" on the controller earlier. The core will load. You may need to press the Menu button you assigned earlier or F12 on the keyboard to bring the menu up. Once your menu is up, select Load ROM and load your game. Once the game loads, you will want to turn on Autosave if your game saves. Basically, the MiSTer has to be told when to save your game. Let's say you save your progress in Final Fantasy for the NES, each time you do this, you need to open the On Screen Display to tell it to save. The autosave setting makes it so all you have to do is open the menu, so it's a good idea to turn it on so you don't forget. Anytime you change a core setting in the menu that you want to keep, you need to save that setting. So since we always want autosave to be on, after turning it on we just switch to the secondary OSD menu (by pressing right on the controller) and select \"Save Settings\". It's that easy. Here's a short video showing you how to load a core, load the game, and turn on autosave. That's it! It wasn't so bad, you made it through the tutorial. Please be sure to check out all the other sections of this documentation, there are some valuable options to configure, tips and tricks to learn, that will make your experience much better.","title":"Play a Game"},{"location":"setup/requirements/","text":"There are a few things you will need in order to setup your MiSTer: Terasic DE10-Nano MiSTer SDRAM Add-On Board (Optional but many cores require it) Cooling for the FPGA (Highly recommended) MicroSD card (minimum 4GB) and MicroSD Card Reader USB OTG Adapter or MiSTer USB Hub Add-On Board (no USB devices will work without this) USB Keyboard Internet connection HDMI Monitor/TV and HDMI Cable Where to buy DE10-Nano: Terasic Digikey Mouser SDRAM: The MiSTer SDRAM add-on board is required by many cores, like the SNES, NES, Playstation, and Game Boy cores. There are multiple sellers out there which sell these, and you can also assemble it yourself if you are skilled at soldering. USB OTG Adapter/Hub: Preferably, the MiSTer USB Hub Add-on board which you can assemble yourself if you are good at soldering, or you can buy from the various shops that sell them. At a minimum, the MakerSpot Micro USB OTG Hub works very well for the MiSTer, if you are looking for a very cheap option. Cooling: The processor on the DE10-Nano is 21.5mm x 21.5mm so a heatsink that is around this size is suitable. If using one larger than these dimensions, please make sure to use care to not let the heatsink touch other electronic components outside the processor. There is no mounting mechanism for the heatsink, you will need to use an \"adhesive thermal pad\". 3M makes some good ones, and the heatsinks you can buy in this size usually come with these kinds of thermal pads already. Do not apply a lot of pressure and do not touch the components directly with your fingers, as static shock can damage them.","title":"Requirements"},{"location":"setup/requirements/#where-to-buy","text":"DE10-Nano: Terasic Digikey Mouser SDRAM: The MiSTer SDRAM add-on board is required by many cores, like the SNES, NES, Playstation, and Game Boy cores. There are multiple sellers out there which sell these, and you can also assemble it yourself if you are skilled at soldering. USB OTG Adapter/Hub: Preferably, the MiSTer USB Hub Add-on board which you can assemble yourself if you are good at soldering, or you can buy from the various shops that sell them. At a minimum, the MakerSpot Micro USB OTG Hub works very well for the MiSTer, if you are looking for a very cheap option. Cooling: The processor on the DE10-Nano is 21.5mm x 21.5mm so a heatsink that is around this size is suitable. If using one larger than these dimensions, please make sure to use care to not let the heatsink touch other electronic components outside the processor. There is no mounting mechanism for the heatsink, you will need to use an \"adhesive thermal pad\". 3M makes some good ones, and the heatsinks you can buy in this size usually come with these kinds of thermal pads already. Do not apply a lot of pressure and do not touch the components directly with your fingers, as static shock can damage them.","title":"Where to buy"},{"location":"setup/software/","text":"First thing to do is to install the software onto your MicroSD card. Flash Mr. Fusion to your MicroSD Mr. Fusion provides a compact image that you can download and flash onto an SD card of any size with a tool like balenaEtcher , Win32 Disk Imager , Apple Pi Baker , or even dd . We're going to use balenaEtcher for this guide. We install balenaEtcher by downloading the latest release for our computer and installing it. Next we're going to download the latest release of Mr. Fusion : Next, we will insert our MicroSD card into our computer and then open balenaEtcher. We will select \"Flash from file\" and navigate to the Mr Fusion file we downloaded a step earlier. Then we need to select our MicroSD card as the target to flash. And click \"Flash!\" Wait for it to complete successfully. If you see \"Flash complete!\" and \"1 Successful target\" then everything worked fine. If the flash fails, try and flash it again or flash a different MicroSD card in case the one you are using is malfunctioning. We can now close balenaEtcher and remove our MicroSD card. Boot the DE10-Nano with Mr. Fusion Next we just need to carefully insert our MicroSD card into the DE10-Nano ( NOT the MicroSD slot on the IO board on top! ). Now turn on your DE10-Nano. We will wait up to a few minutes for the Mr. Fusion installer to complete. Be patient, or else you may have to start all over again. When the MiSTer On Screen Display with fuzzy static behind it appears, that means you have successfully installed the MiSTer software/OS onto your MicroSD. Check out the next tutorials in the side bar!","title":"Setup MicroSD Card"},{"location":"setup/software/#flash-mr-fusion-to-your-microsd","text":"Mr. Fusion provides a compact image that you can download and flash onto an SD card of any size with a tool like balenaEtcher , Win32 Disk Imager , Apple Pi Baker , or even dd . We're going to use balenaEtcher for this guide. We install balenaEtcher by downloading the latest release for our computer and installing it. Next we're going to download the latest release of Mr. Fusion : Next, we will insert our MicroSD card into our computer and then open balenaEtcher. We will select \"Flash from file\" and navigate to the Mr Fusion file we downloaded a step earlier. Then we need to select our MicroSD card as the target to flash. And click \"Flash!\" Wait for it to complete successfully. If you see \"Flash complete!\" and \"1 Successful target\" then everything worked fine. If the flash fails, try and flash it again or flash a different MicroSD card in case the one you are using is malfunctioning. We can now close balenaEtcher and remove our MicroSD card.","title":"Flash Mr. Fusion to your MicroSD"},{"location":"setup/software/#boot-the-de10-nano-with-mr-fusion","text":"Next we just need to carefully insert our MicroSD card into the DE10-Nano ( NOT the MicroSD slot on the IO board on top! ). Now turn on your DE10-Nano. We will wait up to a few minutes for the Mr. Fusion installer to complete. Be patient, or else you may have to start all over again. When the MiSTer On Screen Display with fuzzy static behind it appears, that means you have successfully installed the MiSTer software/OS onto your MicroSD. Check out the next tutorials in the side bar!","title":"Boot the DE10-Nano with Mr. Fusion"},{"location":"setup/updater/","text":"We need to update the MiSTer the first time you get it setup. This is because the MiSTer currently only has a script to update it, no cores, no arcade files, and it's system files may be outdated. If you don't have a wired internet connection to your MiSTer, please remove your microSD and place the WiFi script into the scripts folder, and then follow the instructions in the WiFi tutorial . Running Downloader.sh Now that your MiSTer is connected to either a wired internet connection or a WiFi connection, you should run an update. This may take awhile the first time, but each time you run the updater after that it will take a lot less time. It's important to update your MiSTer regularly as the framework, cores, and software is updated frequently with bug fixes, features, and new cores. It's very easy to run Downloader.sh, just navigate to the scripts selection in the On Screen Display (osd) in the Menu core, select it, and go to the distribution script and select it. See video below for an example of the downloader script running:","title":"Running the Updater"},{"location":"setup/updater/#running-downloadersh","text":"Now that your MiSTer is connected to either a wired internet connection or a WiFi connection, you should run an update. This may take awhile the first time, but each time you run the updater after that it will take a lot less time. It's important to update your MiSTer regularly as the framework, cores, and software is updated frequently with bug fixes, features, and new cores. It's very easy to run Downloader.sh, just navigate to the scripts selection in the On Screen Display (osd) in the Menu core, select it, and go to the distribution script and select it. See video below for an example of the downloader script running:","title":"Running Downloader.sh"}]}